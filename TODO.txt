
Immediate: 

~    1) clean up imports 
        didn't work with extracting the appBar because of props interaction.

~   2) make dummy detail page with cleaned up styles
    ~    read how the current styles.js are configured to optimize and understand

    ~    clean up test files (sidebar FILES + component files)

        learned about: 
            cslx (class name template library)
            material ui box component (styling)
            how to use paper + css floating to make vanilla html look very good
                (material ui's strategy)

            what my morning brain warm up feels like 
    -> finished 11/12, 5 - 7:30 am

    3) Make login / user page
        -> probably need to create second project (see org made for project)
            (because the login page functions outside of the client page / portal logic)
        -> DO WEBPACK TUTORIAL WHILE SETTING UP LOGIN 

        ... then just take the bundle.js and stick it in the client app for heroku 
            deployment / docker purposes 
            (note: do i need to build in the docker container if i build beforhand?)

        -> this will require setting up a database (for userpage, not login cookies)

        -> just deploy to Heroku when the front end is done first. 

    3.5) Express server cleanup 
        (/dist filename logic & redirects if 404 not found... 
           -> which I have to handle with react-router, not express. gah.)

            google: "react-router + express"

    redeploy on heroku!

    4) add other APIs and features for the hell of it. 
        maps APIs
        callendar api 
        google sheets oAuth 


==== Skeleton level ====

    Proptypes check in app (see linter error)

    extract root level jsx code into separate files

    Add category to sidebar list
        very low priority: smooth out dashboard word transition

    unstyle links on react-router (override with material-ui?)

    TEST: will using a styles.js file with no duplicates actually affect performance?? (prob not if not used a ton.)

    
=== Deployment options ===

    -> use heroku + postgres + lambda in docker?

=== Feature level ===

    user profile page / authentication / login 
        => use database creation later...

    create an on-demand web scraper

 *   use machine learning to generate all the information necessary to write code in any language
    from scraping their docs together

        -> start with a "hello, World" application. 

        => this is a massive project, but also inspiring

*   Use bots and apis to scrape financial data, then data mine it? idk.




=== Notes to self ===

look at how many languages I'm using here. Literally. kinda crazy. 

